---
- name: Distribute SSL CA and wildcard keys
  hosts: all
  remote_user: root

  tasks:

    - name: Read global variables
      include_vars: global-vars.yml

    # Prior work needed:
    # $ mkcert -install
    # $ mkcert -CAROOT
    # $ mkcert "*.onestein.lan"
    # Now uploaded results
    - name: Upload mkcert program 
      copy:
        src: files/mkcert
        dest: /root/mkcert
        owner: root
        group: root
        mode: '0700'
        force: true

    # Installing the CA on other systems
    # Installing in the trust store does not require the CA key, so you can export the CA certificate and use mkcert to install it in other machines.
    # 
    #     Look for the rootCA.pem file in mkcert -CAROOT
    #     copy it to a different machine
    #     set $CAROOT to its directory
    #     run mkcert -install
    # 
    # Remember that mkcert is meant for development purposes, not production, so it should not be used on end users' machines, and that you should not export or share rootCA-key.pem.

    - name: Upload keys and certs 
      copy:
        src: "files/{{ item }}"
        dest: "/root/{{ item }}"
        owner: root
        group: root
        mode: '0600'
        force: true
      with_items:
        - rootCA.pem
        - _wildcard.onestein.lan.pem
        - _wildcard.onestein.lan-key.pem
    #   - rootCA-key.pem

    - name: Try to install my root CA on this system
      shell:
        cmd: CAROOT=/root /root/mkcert -install

    # Check if our CA is already installed
    # Should be /usr/local/share/ca-certificates/mkcert_development_CA_62268663181785622328732999788222374785.crt
    - name: Verify that our root CA is already installed
      stat:
        path: "{{ root_ca_path }}"
      register: root_ca_stat

    - name: Is our root CA already present?
      debug:
        msg: "Yes it is!" 
      when: root_ca_stat.stat.exists



