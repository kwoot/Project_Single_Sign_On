---
- name: Install Zabbix 5.4 server
  hosts: grpzabbixserver
  remote_user: root


  # use this command line: ansible-playbook  -vvv  --ask-pass  --ask-become-pass  setup-new-server.yml  -i 10.1.1.158,  -u jeroen

  vars:
    ansible_python_interpreter: /usr/bin/python3
    zabbix_repo: zabbix-release_5.4-1+ubuntu20.04_all.deb
    keycloak_server_url: https://ad.{{ domain }}
    zabbix_server_url: https://zabbix.{{ domain }}
    zabbix_client_id: "client-zabbix-{{ ansible_fqdn }}"
    zabbix_client_name: "client-zabbix-{{ ansible_fqdn }}"

  handlers:
    - name: Initial db load
      become: true
      become_user: zabbix
      ansible.builtin.command:
        cmd: set -o pipefail && zcat /usr/share/doc/zabbix-sql-scripts/postgresql/create.sql.gz | psql zabbix
      register: my_output # <- Registers the command output.
      changed_when: my_output.rc != 0 # <- Uses the return code to define when the task has changed.

  tasks:
    - name: Show tip for sensible output
      ansible.builtin.debug:
        msg: Readable debug output  export ANSIBLE_STDOUT_CALLBACK=debug

    - name: Read global vars
      ansible.builtin.include_vars: global-vars.yml

    - name: Read encrypted content
      ansible.builtin.include_vars: encrypted-vars.yml

    - name: Check if server is Ubuntu 20.04
      ansible.builtin.fail:
        msg: "'Unsupported platform! This playbook is for Ubuntu 20.04!"
      when: not (ansible_distribution == 'Ubuntu' and ansible_distribution_version == '20.04')

    - name: Download Zabbix 5.4 repo package for Ubuntu 20.04
      ansible.builtin.get_url:
        url: "https://repo.zabbix.com/zabbix/5.4/ubuntu/pool/main/z/zabbix-release/{{ zabbix_repo }}"
        dest: "/tmp/{{ zabbix_repo }}"
        mode: '0644'
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '20.04'

    - name: Install 5.4 repo list
      ansible.builtin.apt:
        deb: "/tmp/{{ zabbix_repo }}"
        update_cache: true

    - name: Extra update apt cache
      ansible.builtin.apt:
        update_cache: true

    # Install all needed software in one go.
    - name: Install all needed packages
      ansible.builtin.apt:
        name: "{{ item }}"
      loop:
        - postgresql
        - zabbix-agent
        - zabbix-sender
        - zabbix-get
        - lm-sensors
        - jq
        - mlocate
        - zabbix-server-pgsql
        - zabbix-frontend-php
        - php7.4-pgsql
        - zabbix-nginx-conf
        - zabbix-sql-scripts
        - zabbix-web-service
        - python3-psycopg2
        - python3-lxml
        - libxml2-utils
        - xmlstarlet

    #  Edit file /etc/zabbix/zabbix_server.conf,  DBPassword=password
    - name: Configure zabbix database password
      ansible.builtin.lineinfile:
        path: /etc/zabbix/zabbix_server.conf
        regexp: '#DBPassword='
        line: "DBPassword=zabbix"

    - name: Set timezone to Europe/Amsterdam
      community.general.timezone:
        name: Europe/Amsterdam

    # Setup Postgresql database
    - name: Setup Zabbix Postgresql database user
      become: true
      become_user: postgres
      community.postgresql.postgresql_user:
        name: zabbix
        password: 'zabbix'
        # priv: "CONNECT"

    - name: Setup Zabbix Postgresql database
      become: true
      become_user: postgres
      community.postgresql.postgresql_db:
        name: zabbix
        template: 'template0'
        owner: zabbix
        state: present
      register: dbwork
      notify:
        - Initial db load

    - name: Show dbwork var
      ansible.builtin.debug:
        msg: "{{ dbwork }}"

    - name: (Re)start Zabbix agent
      ansible.builtin.systemd_service:
        name: zabbix-agent
        enabled: true
        state: restarted

    - name: Make SSL dir for nginx
      ansible.builtin.file:
        path: /etc/nginx/ssl
        state: directory
        mode: '0755'

    - name: Copy SSL key and cert to ssl dir
      ansible.builtin.copy:
        src: "files/{{ item }}"
        dest: "/etc/nginx/ssl/{{ item }}"
        owner: root
        group: root
        mode: '0600'
      loop:
        - _wildcard.{{ domain }}.pem
        - _wildcard.{{ domain }}-key.pem

    - name: Install nginx config file
      ansible.builtin.copy:
        src: files/zabbix_nginx.conf
        dest: /etc/nginx/sites-available/default
        mode: '0644'


    # Docs describing a working setup. Zabbix currently only supports SAML out
    # of the box.
    # https://www.techrunnr.com/how-to-integrate-keycloak-with-zabbix-for-sso-saml/
    # Actually, the above sucks when you sync user profiles from LDAP bc it will
    # override the user attribute described in this setup.  Take the effort and
    # read https://blog.devarieux.net/2021/12/zabbix-saml-keycloak-google.html
    # for a better working solution.

    # Generate a key on the Zabbix server
    - name: Generate key on Zabbix server
      ansible.builtin.command:
        cmd: /usr/bin/openssl req -x509 -sha256 -newkey rsa:2048 -keyout sp.key -out sp.crt -days 3650 -nodes -subj '/CN={{ domain }}'
        chdir: /usr/share/zabbix/conf/certs
      register: my_output # <- Registers the command output.
      changed_when: my_output.rc != 0 # <- Uses the return code to define when the task has changed.

    # Start getting auth token
    # Retrieve token url needed.  Returns JSON payload with var token-service.
    - name: Retrieve token url from server
      ansible.builtin.uri:
        url: "{{ keycloak_server_url }}/realms/master"
        validate_certs: false
      register: tokenurl

    - name: Show token-service
      ansible.builtin.debug:
        var: tokenurl.json["token-service"]

    - name: Store url for easier retrieval
      ansible.builtin.set_fact:
        token_url: "{{ tokenurl.json[\"token-service\"] }}"

    # Call info endpoint
    - name: "Retrieve endpoint info for our realm {{ realm }}"
      ansible.builtin.uri:
        url: "{{ keycloak_server_url }}/realms/{{ realm }}/.well-known/openid-configuration"
        validate_certs: false
      register: endpointinfo

    - name: Show endpoint info
      ansible.builtin.debug:
        var: endpointinfo

    - name: Store authorization_endpoint for faster retrieval
      ansible.builtin.set_fact:
        authorization_endpoint: "{{ endpointinfo.json[\"authorization_endpoint\"] }}"

    # "authorization_endpoint": "https://ad.{{ domain }}/realms/ONESTEIN.LAN/protocol/openid-connect/auth",
    - name: Show authorization endpoint
      ansible.builtin.debug:
        var: authorization_endpoint

    - name: Store token_endpoint for faster retrieval
      ansible.builtin.set_fact:
        token_endpoint: "{{ endpointinfo.json[\"token_endpoint\"] }}"

    - name: Show token endpoint
      ansible.builtin.debug:
        var: token_endpoint

    - name: Store userinfo_endpoint for faster retrieval
      ansible.builtin.set_fact:
        userinfo_endpoint: "{{ endpointinfo.json[\"userinfo_endpoint\"] }}"

    - name: Show userinfo endpoint
      ansible.builtin.debug:
        var: userinfo_endpoint

    # Get authentication token from token-service url
    - name: Retrieve authentication token from token-service url
      ansible.builtin.uri:
        url: "{{ tokenurl.json[\"token-service\"] }}/token"
        method: POST
        body_format: form-urlencoded
        validate_certs: false
        body:
          realm: master
          client_id: admin-cli
          username: "{{ kc_adminid }}"
          password: "{{ kc_adminpw }}"
          grant_type: password
      register: authtoken

    - name: Show var authtoken
      ansible.builtin.debug:
        var: authtoken

    - name: Show var access_token
      ansible.builtin.debug:
        var: authtoken.json["access_token"]

    - name: Store access token into variable for easier retrieval
      ansible.builtin.set_fact:
        auth_token: "{{ authtoken.json[\"access_token\"] }}"

    - name: Show auth_token
      ansible.builtin.debug:
        var: auth_token


    # Retrieve IDP metadata descriptor and copy the 509 formatted certificate
    # https://ad.{{ domain }}/realms/ONESTEIN.LAN/protocol/saml/descriptor
    - name: Retrieve IDP metadata descriptor to use the 509 formatted certificate
      ansible.builtin.uri:
        url: "{{ keycloak_server_url }}/realms/{{ realm }}/protocol/saml/descriptor"
#       headers:
#         Accept: "application/json"
#         Authorization: "Bearer {{ auth_token }}"
        method: get
        validate_certs: false
        return_content: true
      register: idp_metadata

    - name: Show idp metadata
      ansible.builtin.debug:
        var: idp_metadata

# Please do not go down this road and stay sane...
#   - xml:
#       xmlstring: "{{ idp_metadata.content }}"
#       xpath: /listResponse/instance
#       xpath: /md:EntityDescriptor/md:IDPSSODescriptor/md:KeyDescriptor/ds:KeyInfo/ds:X509Data/ds:X509Certificate
#       content: attribute
#     register: instance_attributes

    # We are going to save the XML metadate for shell processing
    - name: Save IDP XML metadata to file for processing
      ansible.builtin.copy:
        content: "{{  idp_metadata.content }}"
        dest: /tmp/idp.xml
        mode: '0600'

    # We are going to use a shell command to retrieve the value for X509Certificate
    - name: Run xmlstarlet to retrieve X509Certificate
      ansible.builtin.command:
        cmd: /usr/bin/xmlstarlet sel -t -v //ds:X509Certificate /tmp/idp.xml
      register: xmlstarlet
      changed_when: xmlstarlet.rc != 0 # <- Uses the return code to define when the task has changed.


    - name: Show var xmlstarlet
      ansible.builtin.debug:
        var: xmlstarlet

    - name: Store output in certificate variable
      ansible.builtin.set_fact:
        certificate: "{{ xmlstarlet.stdout }}"

    - name: Create idp.crt file
      ansible.builtin.template:
        src: templates/zabbix-sso-idp.crt.j2
        dest: /usr/share/zabbix/conf/certs/idp.crt
        force: true
        owner: root
        group: root
        mode: '0644'

#   - name: Retrieve current Zabbix client definition

    # Retrieve current list of clients of our type
    # So, this works in curl:
    # curl -k -v -H "Accept: application/json" -H "Authorization: Bearer ${access_token}" "https://ad.{{ domain }}:8443/admin/realms/master/clients" | jq .
    - name: Retrieve current list of clients and search for already existing "{{ zabbix_client_id }} "
      ansible.builtin.uri:
        url: "{{ keycloak_server_url }}/admin/realms/{{ realm }}/clients?clientId={{ zabbix_client_id }}"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ auth_token }}"
        method: get
        validate_certs: false
      register: existingclient

    - name: Returned json
      ansible.builtin.debug:
        var: existingclient

    - name: Find ID in returned json
      ansible.builtin.debug:
        var: existingclient.json[0].id

    - name: Copy remote ssl files to remote /tmp
      ansible.builtin.copy:
        remote_src: true
        src: "/usr/share/zabbix/conf/certs/{{ item }}"
        dest: "/tmp/{{ item }}"
        mode: '0644'
      loop:
        - sp.crt
        - sp.key
#       - idp.crt

    - name: Remove first line from tmp files
      ansible.builtin.lineinfile:
        path: "/tmp/{{ item }}"
        regexp: '^-----(BEGIN|END).*-----$'
        state: absent
      loop:
        - sp.crt
        - sp.key
#       - idp.crt

    - name: Retrieve remote ssl cert
      ansible.builtin.command:
        cmd: cat  /tmp/sp.crt  |  tr -d '\n'
      register: sp_crt
      changed_when: sp_crt.rc != 0 # <- Uses the return code to define when the task has changed.

    - name: Show sp crt
      ansible.builtin.debug:
        var: sp_crt

    - name: Retrieve remote ssl key
      ansible.builtin.command:
        cmd: cat  /tmp/sp.key  |  tr -d '\n'
      register: sp_key
      changed_when: sp_key.rc != 0 # <- Uses the return code to define when the task has changed.


    - name: Show sp key
      ansible.builtin.debug:
        var: sp_key

    - name: If it already exists then delete client id  "{{ zabbix_client_id }}".
      # Example: "id": "ba973624-2d00-488f-8d18-154224c63f8f"
      ansible.builtin.uri:
        url: "{{ keycloak_server_url }}/admin/realms/{{ realm }}/clients/{{ existingclient.json[0].id }}"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ auth_token }}"
        method: DELETE
        validate_certs: false
        status_code: 204
      when: existingclient.json[0].id is defined
      register: deleteclient

    - name: Show deleteclient var
      ansible.builtin.debug:
        var: deleteclient

    - name: Convert Ninja template to variable
      ansible.builtin.set_fact:
        jsonbody: "{{ lookup('template', 'zabbix-keycloak-sso.json.j2') }}"

    - name: Show json body
      ansible.builtin.debug:
        var: jsonbody

    - name: For debugging store json var in local file
      ansible.builtin.copy:
        content: "{{ jsonbody }}"
        dest: /tmp/jsonbody
        mode: '0600'

   # Generate the json payload to upload
    - name: Upload JSON template file to create new Client ID on Keycloak server
      ansible.builtin.uri:
        url: "{{ keycloak_server_url }}/admin/realms/{{ realm }}/clients"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ auth_token }}" # .json[\"access_token\"]  }}"
        method: POST
        validate_certs: false
        body_format: json
        body: "{{ jsonbody }}"
        status_code: 201
      register: createclientresult

    # Good news! Result contains location of new client id in location
    # Example: "location": "https://ad.{{ domain }}:8443/admin/realms/ONESTEIN.LAN/clients/e01a87cf-537c-441e-b6ee-17f4cd07d92c"
    - name: If all went well we now have a locaton of the newly created Client ID
      ansible.builtin.debug:
        var: createclientresult.location

    - name: (Re)start Zabbix server
      ansible.builtin.systemd:
        name: zabbix-server
        enabled: true
        state: restarted

    - name: (Re)start Nginx server
      ansible.builtin.systemd:
        name: nginx
        enabled: true
        state: restarted


    - name: Post-install message IT IS IMPORTANT TO READ THIS
      ansible.builtin.debug:
        msg: |
          **********************************************************************************************************
          * After a fresh installation of Zabbix you need to run the setup process.
          * Visit zabbix.{{ domain }}
          * Database type is PostgreSQL and database password is 'zabbix'.
          * Al other default choices are ok.
          *
          * After you can get into the Web GUI configure SAML settings as follows
          * - Visit "{{ zabbix_server_url }}/zabbix.php?action=authentication.edit" and visit the SAML settings tab
          * - Enable the "Enable SAML authentication" checkbox.
          * - Set IdP entity ID to "{{ keycloak_server_url }}/realms/{{ realm }}"
          * - Set SSO service URL to "{{ keycloak_server_url }}/realms/{{ realm }}/protocol/saml"
          * - Set SLO service URL to "{{ keycloak_server_url }}/realms/{{ realm }}/protocol/saml"
          * - Set Username attribute to 'email'
          * - Set SP entity ID to "{{ zabbix_client_id }}"
          * - Set SP name ID format to 'urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress'
          * - Click on the 'Update' button at the bottom.
          *
          * Configure users in Zabbix to use SAML
          * - Make sure every Zabbix user account is in email address format user@fqdn.
          * - In Keycloak make sure every user has in the Attributes tab an attribute called 'zabbixuser'
          *   containing that same email address.
          *
          * Now login to Zabbix not by entering userid/password.
          * But by clicking on the 'Sign in with Single Sign-On (SAML)' link.
          **********************************************************************************************************
