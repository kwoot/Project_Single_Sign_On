---
- name: Migrate Nextcloud SNAP! to SSO
  hosts: grpnc
  remote_user: root
  become: true
  become_user: root
  become_method: sudo

  # use this command line: ansible-playbook -v -i hosts install-nextcloud.yml -u root
  # Execute ansible-playbook playbookfile.yml -i hosts --vault-password-file .vault-password

  vars:
    ansible_python_interpreter: /usr/bin/python3
    supported_distros: "{{ ansible_distribution }} {{ ansible_distribution_major_version }}"
    nextcloud_fqdn: "nc.{{ domain }}"
    # Yes, this is different from the other playbooks. For a reason...
    # https://nc.onestein.lan/index.php/apps/user_saml/saml/metadata
    nextcloud_client_id: "https://{{ ansible_fqdn }}/index.php/apps/user_saml/saml/metadata"
    nextcloud_client_name: "client-nextcloud-{{ ansible_fqdn }}"
    keycloak_server_url: https://ad.{{ domain }}
    nextcloud_server_url: https://nc.{{ domain }}
    realm: "{{ realm }}"

  tasks:
    - debug:
        msg: Readable debug output  export ANSIBLE_STDOUT_CALLBACK=debug

    - name: Read global vars
      include_vars: global-vars.yml

    - name: Read encrypted content
      include_vars: encrypted-vars.yml

    - name: check if server is Ubuntu 20.04
      fail: msg='Unsupported platform! This playbook is for Ubuntu 20.04!'
      when: supported_distros not in ["Ubuntu 20"]

    - name: Extra update apt cache
      ansible.builtin.apt:
        update_cache: yes
        name: xmlstarlet

    - name: Unpack nextcloud
      snap:
        name: nextcloud

    - name: Configure Nextcloud snap to use self-signed certificates
      shell:
        cmd: nextcloud.enable-https self-signed

    # Retrieve some saml info from our Keycloak server
    # We can create a SAML client at the Keycloak side.  And use REST to
    # configure at the CMDBuild side.

    ####################################################
    # Create a SAML client at the Keycloak side.
    ####################################################

    # Generate a key on the nextcloud server
    - name: Generate key on nextcloud server
      shell:
        cmd: /usr/bin/openssl req -x509 -sha256 -newkey rsa:2048 -keyout sp.key -out sp.crt -days 3650 -nodes -subj '/CN={{ domain }}'
        chdir: /tmp

    # Start getting auth token
    # Retrieve token url needed.  Returns JSON payload with var token-service.
    - name: Retrieve token url from server
      uri:
        url: "{{ keycloak_server_url }}/realms/master"
        validate_certs: false
      register: tokenurl

    - debug:
        var: tokenurl.json["token-service"]

    - name: Store url for easier retrieval
      set_fact:
        token_url: "{{ tokenurl.json[\"token-service\"] }}"

    # Call info endpoint
    - name: "Retrieve endpoint info for our realm {{ realm }}"
      uri:
        url: "{{ keycloak_server_url }}/realms/{{ realm }}/.well-known/openid-configuration"
        validate_certs: false
      register: endpointinfo

    - debug:
        var: endpointinfo

    - name: Store authorization_endpoint for faster retrieval
      set_fact:
        authorization_endpoint: "{{ endpointinfo.json[\"authorization_endpoint\"] }}"

    # "authorization_endpoint": "https://ad.{{ domain }}/realms/ONESTEIN.LAN/protocol/openid-connect/auth",
    - debug:
        var: authorization_endpoint

    - name: Store token_endpoint for faster retrieval
      set_fact:
        token_endpoint: "{{ endpointinfo.json[\"token_endpoint\"] }}"
    - debug:
        var: token_endpoint

    - name: Store userinfo_endpoint for faster retrieval
      set_fact:
        userinfo_endpoint: "{{ endpointinfo.json[\"userinfo_endpoint\"] }}"
    - debug:
        var: userinfo_endpoint

    # Get authentication token from token-service url
    - name: Retrieve authentication token from token-service url
      uri:
        url: "{{ tokenurl.json[\"token-service\"] }}/token"
        method: POST
        body_format: form-urlencoded
        validate_certs: false
        body:
          realm: master
          client_id: admin-cli
          username: "{{kc_adminid }}"
          password: "{{kc_adminpw }}"
          grant_type: password
      register: authtoken

    - debug:
        var: authtoken

    - debug:
        var: authtoken.json["access_token"]

    - name: Store access token into variable for easier retrieval
      set_fact:
        auth_token: "{{ authtoken.json[\"access_token\"] }}"

    - debug:
        var: auth_token

    # Retrieve IDP metadata descriptor and copy the 509 formatted certificate
    # https://ad.{{ domain }}/realms/ONESTEIN.LAN/protocol/saml/descriptor
    - name: Retrieve IDP metadata descriptor to use the 509 formatted certificate
      uri:
        url: "{{ keycloak_server_url }}/realms/{{ realm }}/protocol/saml/descriptor"
#       headers:
#         Accept: "application/json"
#         Authorization: "Bearer {{ auth_token }}"
        method: get
        validate_certs: false
        return_content: yes
      register: idp_metadata

    - debug:
        var: idp_metadata

# Please do not go down this road and stay sane...
#   - xml:
#       xmlstring: "{{ idp_metadata.content }}"
#       xpath: /listResponse/instance
#       xpath: /md:EntityDescriptor/md:IDPSSODescriptor/md:KeyDescriptor/ds:KeyInfo/ds:X509Data/ds:X509Certificate
#       content: attribute
#     register: instance_attributes

    # We are going to save the XML metadate for shell processing
    - name: Save IDP XML metadata to file for processing
      copy:
        content: "{{  idp_metadata.content }}"
        dest: /tmp/idp.xml

    # We are going to use a shell command to retrieve the value for X509Certificate
    - name: Run xmlstarlet to retrieve X509Certificate
      shell:
        cmd: /usr/bin/xmlstarlet sel -t -v //ds:X509Certificate /tmp/idp.xml
      register: xmlstarlet

    - debug:
        var: xmlstarlet

    - name: Store output in certificate variable
      set_fact:
        idp_crt: "{{ xmlstarlet.stdout }}"

    - name: Remove first line from tmp files
      lineinfile:
        path: "/tmp/{{ item }}"
        regexp: '^-----(BEGIN|END).*-----$'
        state: absent
      loop:
        - sp.crt
        - sp.key

    - name: Retrieve remote ssl cert
      shell:
        cmd: cat  /tmp/sp.crt  |  tr -d '\n'
      register: sp_crt

    - debug:
        var: sp_crt

    - name: Retrieve remote ssl key
      shell:
        cmd: cat  /tmp/sp.key  |  tr -d '\n'
      register: sp_key

    - debug:
        var: sp_key

    # Retrieve current list of clients of our type
    # So, this works in curl:
    # curl -k -v -H "Accept: application/json" -H "Authorization: Bearer ${access_token}" "https://ad.{{ domain }}:8443/admin/realms/master/clients" | jq .
    - name: Retrieve current list of clients and search for already existing "{{ nextcloud_client_id }} "
      uri:
        url: "{{ keycloak_server_url }}/admin/realms/{{ realm }}/clients?clientId={{ nextcloud_client_id }}"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ auth_token }}"
        method: get
        validate_certs: false
      register: existingclient

    - name: Returned json
      debug:
        var: existingclient

#   - name: Copy currently existing client definition to backup file in JSON format.
#     copy:
#      content: "{{ existingclient }}"
#      dest: /tmp/nextcloud-original-client-backup.json

    - name: Find ID in returned json
      debug:
        var: existingclient.json[0].id

    - name: Delete client id  "{{ nextcloud_client_id }}" if it already exists.
      # Example: "id": "ba973624-2d00-488f-8d18-154224c63f8f"
      uri:
        url: "{{ keycloak_server_url }}/admin/realms/{{ realm }}/clients/{{ existingclient.json[0].id }}"
        headers:
         Accept: "application/json"
         Authorization: "Bearer {{ auth_token }}"
        method: DELETE
        validate_certs: false
        status_code: 204
      when: existingclient.json[0].id is defined
      register: deleteclient

    - debug:
        var: deleteclient

    - debug:
        msg: "If the next step fails, run 'ansible-galaxy collection install community.general'"

    - name: Convert Ninja template to variable
      set_fact:
        jsonbody: "{{ lookup('template', 'nextcloud-keycloak-sso.json.j2') }}"

    - debug:
        var: jsonbody

    - name: For debugging store json var in local file
      copy:
        content: "{{ jsonbody }}"
        dest: /tmp/nextcloud-new-client-backup.json

   # Generate the json payload to upload
    - name: Upload JSON template file to create new Client ID on Keycloak server
      uri:
        url: "{{ keycloak_server_url }}/admin/realms/{{ realm }}/clients"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ auth_token }}" #.json[\"access_token\"]  }}"
        method: POST
        validate_certs: false
        body_format: json
        body: "{{ jsonbody }}"
        status_code: 201
      register: createclientresult

    # Good news! Result contains location of new client id in location
    # Example: "location": "https://ad.{{ domain }}:8443/admin/realms/ONESTEIN.LAN/clients/e01a87cf-537c-441e-b6ee-17f4cd07d92c"
    - name: If all went well we now have a locaton of the newly created Client ID
      debug:
        var: createclientresult.location

    - name: Put nextcloud OCC commands together in one Ansbible block
#     ##########################################################################
#     # Start of Nexctcloud OCC commands block
#     ##########################################################################
      block:

      - name: Check if we need to run occ maintenance:install command
        shell:
          cmd: nextcloud.occ list
          chdir: /snap/nextcloud/current
        register: occ_list

      - name: Installing nextcloud from the command line if first time.
        shell:
          cmd: nextcloud.occ maintenance:install --database pgsql --database-name nextcloud --database-host 127.0.0.1 --database-port 5432 --database-user nextcloud --database-pass 'nextcloud' --admin-user admin --admin-pass admin --admin-email jbaten@i2rs.nl --data-dir /var/lib/nextcloud
          chdir: /snap/nextcloud/current
        when: '"maintenance:install" in occ_list.stdout'

      - name: "Configuring/adding trusted domain nc.{{ domain }}"
        shell:
          cmd: "nextcloud.occ config:system:set trusted_domains 1 --value='nc.{{ domain }}'"
          chdir: /snap/nextcloud/current

      - name: Enable already installed but default disabled Nextcloud External Storage support
        shell:
          cmd: nextcloud.occ app:enable files_external
          chdir: /snap/nextcloud/current

      - name: Retrieve list of currently installed apps
        shell:
          cmd: nextcloud.occ app:list
          chdir: /snap/nextcloud/current
        register: app_list

      - name: Install and enable all the Nextcloud apps we like
        shell:
          cmd: nextcloud.occ app:install "{{ item }}"
          chdir: /snap/nextcloud/current
        loop:
          - deck
          - user_saml
        # When combining conditionals with a loop, the when: statement is processed separately for each item.
        # This is tested and works.
        when: 'item not in app_list.stdout'

      # Now start configuring Saml SSO connection to keycloak
      # https://www.muehlencord.de/wordpress/2019/12/14/nextcloud-sso-using-keycloak/
      #
      # Thhis could be useful: https://janikvonrotz.ch/2020/04/21/configure-saml-authentication-for-nextcloud-with-keycloack/
      #
      # In case you lose connection to your nextcloud account, you can try to connect login
      # to http://nextcloud.my.domain/login?direct=1 to login with your admin account again.
      #
      # Make sure some settings are in place
      # occ config:list
      # "user_saml": {
      #       "installed_version": "5.0.2",
      #       "types": "authentication",
      #       "enabled": "yes",
      #       "type": "saml",
      #       "general-require_provisioned_account": "1",
      #       "general-allow_multiple_user_back_ends": "0"

      # If 0 then autocreate users, if 1, then not...
      # Set this to 1 and try to solve it yourself...
      - name: Configure Only allow authentication if an account exists on some other backend (e.g. LDAP).
        shell:
          cmd: nextcloud.occ config:app:set user_saml general-require_provisioned_account --value="0"
          chdir: /snap/nextcloud/current

      # Disable this setting (means set it to 1) once Keycloak connection works.
      - name: Configure Allow the use of multiple user back-ends (e.g. LDAP)
        shell:
          # Yes, I know, a zero to switch it on is weird.
          cmd: nextcloud.occ config:app:set user_saml general-allow_multiple_user_back_ends --value="1"
          chdir: /snap/nextcloud/current

      # Add a new identity provider

      # Start to setup a new identity provider with the following settings

      #  sudo -u www-data nextcloud.occ saml:config:get
      - name: Dump current saml config to see changes
        shell:
          cmd: nextcloud.occ  saml:config:get
          chdir: /snap/nextcloud/current

      ##########################################################################
      # After some thought I decided to claim/overwrite saml_user config set 1 !
      ##########################################################################
      # This means we start with deleting entry 1
      - name: Deleting original first saml configuration entry !!!
        shell:
          cmd: nextcloud.occ  saml:config:delete 1
          chdir: /snap/nextcloud/current

      #    Attribute to map the UID to :  username
      #    Displayname : any name you like : e.g. Keycloak
      #    Name id format : unspecififed
      #    X.509 certificate of the service provider : leave empty for the moment
      #    Private key of the service provider : leave also empty for now
      #    Identifier of the IdP entry : https://keycloak.my.domain/auth/realms/<yourrealm>
      #    URL, Target of the IdP where the SP will send the Authentication Request Message : https://keycloak.my.domain/auth/realms/<yourrealm>/protocol/saml
      #    URL Location of the IdP where the SP will send SLO Request : https://keycloak.my.domain/auth/realms/<yourrealm>/protocol/saml
      #    Public X.509 certificate of the IdP : leave empty
      #
      #    saml:config:set
      #    [--general-idp0_display_name GENERAL-IDP0_DISPLAY_NAME]
      #    [--general-uid_mapping GENERAL-UID_MAPPING]
      #    [--idp-entityId IDP-ENTITYID]
      #    [--idp-singleLogoutService.responseUrl IDP-SINGLELOGOUTSERVICE.RESPONSEURL]
      #    [--idp-singleLogoutService.url IDP-SINGLELOGOUTSERVICE.URL]
      #    [--idp-singleSignOnService.url IDP-SINGLESIGNONSERVICE.URL]
      #    [--idp-x509cert IDP-X509CERT]
      #    [--security-authnRequestsSigned SECURITY-AUTHNREQUESTSSIGNED]
      #    [--security-general SECURITY-GENERAL]
      #    [--security-logoutRequestSigned SECURITY-LOGOUTREQUESTSIGNED]
      #    [--security-logoutResponseSigned SECURITY-LOGOUTRESPONSESIGNED]
      #    [--security-lowercaseUrlencoding SECURITY-LOWERCASEURLENCODING]
      #    [--security-nameIdEncrypted SECURITY-NAMEIDENCRYPTED]
      #    [--security-offer SECURITY-OFFER]
      #    [--security-required SECURITY-REQUIRED]
      #    [--security-signatureAlgorithm SECURITY-SIGNATUREALGORITHM]
      #    [--security-signMetadata SECURITY-SIGNMETADATA]
      #    [--security-sloWebServerDecode SECURITY-SLOWEBSERVERDECODE]
      #    [--security-wantAssertionsEncrypted SECURITY-WANTASSERTIONSENCRYPTED]
      #    [--security-wantAssertionsSigned SECURITY-WANTASSERTIONSSIGNED]
      #    [--security-wantMessagesSigned SECURITY-WANTMESSAGESSIGNED]
      #    [--security-wantNameId SECURITY-WANTNAMEID]
      #    [--security-wantNameIdEncrypted SECURITY-WANTNAMEIDENCRYPTED]
      #    [--security-wantXMLValidation SECURITY-WANTXMLVALIDATION]
      #    [--saml-attribute-mapping-displayName_mapping SAML-ATTRIBUTE-MAPPING-DISPLAYNAME_MAPPING]
      #    [--saml-attribute-mapping-email_mapping SAML-ATTRIBUTE-MAPPING-EMAIL_MAPPING]
      #    [--saml-attribute-mapping-group_mapping SAML-ATTRIBUTE-MAPPING-GROUP_MAPPING]
      #    [--saml-attribute-mapping-home_mapping SAML-ATTRIBUTE-MAPPING-HOME_MAPPING]
      #    [--saml-attribute-mapping-quota_mapping SAML-ATTRIBUTE-MAPPING-QUOTA_MAPPING]
      #    [--sp-x509cert SP-X509CERT]
      #    [--sp-name-id-format SP-NAME-ID-FORMAT]
      #    [--sp-privateKey SP-PRIVATEKEY]
      #    [--output [OUTPUT]] [--] <providerId>
      #
      #  sudo -u www-data nextcloud.occ saml:config:get
      #  - 1:
      #    - general-uid_mapping: username
      #    - general-idp0_display_name: Keycloak
      #    - sp-x509cert:
      #    - sp-privateKey:
      #    - idp-entityId: https://ad.{{ domain }}/auth/realms/ONESTEIN.LAN
      #    - idp-singleSignOnService.url: https://ad.{{ domain }}/auth/realms/ONESTEIN.LAN/protocol/saml
      #    - idp-singleLogoutService.url: https://ad.{{ domain }}/auth/realms/ONESTEIN.LAN/protocol/saml
      #

      #    - general-idp0_display_name: Keycloak
      #    PLEASE NOTE: No '--value'  to set the value!
      - name: Saml configuration set general-idp0_display_name
        shell:
          cmd: nextcloud.occ  saml:config:set --general-idp0_display_name  "Keycloak"   1
          chdir: /snap/nextcloud/current

      #    - general-uid_mapping: username
      #    PLEASE NOTE: No '--value'  to set the value!
      - name: Saml configuration set general-uid_mapping
        shell:
          cmd: nextcloud.occ  saml:config:set --general-uid_mapping "username"   1
          chdir: /snap/nextcloud/current

      # Add mapping of email adres
      # saml-attribute-mapping-email_mapping: email
      - name: Saml configuration set saml-attribute-mapping-email_mapping
        shell:
          cmd: nextcloud.occ  saml:config:set --saml-attribute-mapping-email_mapping "email"   1
          chdir: /snap/nextcloud/current

      #    - idp-entityId: https://ad.{{ domain }}/realms/ONESTEIN.LAN
      #    https://nextcloud.yourdomain.com/index.php/apps/user_saml/metadata  ?
      #    What is an Entity ID: https://spaces.at.internet2.edu/display/federation/saml-metadata-entityid
      - name: Saml configuration set idp-entityId
        shell:
#         cmd: nextcloud.occ  saml:config:set  --idp-entityId  "{{ nextcloud_server_url }}/index.php/apps/user_saml/metadata" 1
          cmd: nextcloud.occ  saml:config:set  --idp-entityId  "{{ keycloak_server_url }}/realms/{{ realm }}" 1
#         cmd: nextcloud.occ  saml:config:set  --idp-entityId  "{{ nextcloud_client_id }}" 1
          chdir: /snap/nextcloud/current

      #    - idp-singleSignOnService.url: https://ad.{{ domain }}/realms/ONESTEIN.LAN/protocol/saml
      # --idp-singleSignOnService.url
      - name: Saml configuration set general-uid_mapping
        shell:
          cmd: nextcloud.occ  saml:config:set --idp-singleSignOnService.url "{{ keycloak_server_url }}/realms/{{ realm }}/protocol/saml"   1
          chdir: /snap/nextcloud/current

      #    - idp-singleLogoutService.url: https://ad.{{ domain }}/realms/ONESTEIN.LAN/protocol/saml
      # --idp-singleLogoutService.url
      - name: Saml configuration set general-uid_mapping
        shell:
          cmd: nextcloud.occ  saml:config:set --idp-singleLogoutService.url  "{{ keycloak_server_url }}/realms/{{ realm }}/protocol/saml"   1
          chdir: /snap/nextcloud/current

      # - security-authnRequestsSigned: 1
      - name: Saml configuration set  security-authnRequestsSigned
        shell:
          cmd: nextcloud.occ  saml:config:set --security-authnRequestsSigned  "1"   1
          chdir: /snap/nextcloud/current

      # - security-logoutRequestSigned: 1
      - name: Saml configuration set security-logoutRequestSigned
        shell:
          cmd: nextcloud.occ  saml:config:set --security-logoutRequestSigned  "1"   1
          chdir: /snap/nextcloud/current

      # - security-logoutResponseSigned: 1
      - name: Saml configuration set  security-logoutResponseSigned
        shell:
          cmd: nextcloud.occ  saml:config:set --security-logoutResponseSigned  "1"   1
          chdir: /snap/nextcloud/current

      # - security-wantMessagesSigned: 1
      - name: Saml configuration set security-wantMessagesSigned
        shell:
          cmd: nextcloud.occ  saml:config:set --security-wantMessagesSigned  "1"   1
          chdir: /snap/nextcloud/current

      # - security-wantAssertionsSigned: 1
#     - name: Saml configuration set  security-wantAssertionsSigned
#       shell:
#         cmd: nextcloud.occ  saml:config:set --security-wantAssertionsSigned  "1"   1
#         chdir: /snap/nextcloud/current

      # sp_certs_not_found_and_required, idp_cert_or_fingerprint_not_found_and_required
      #    [--sp-x509cert SP-X509CERT]
      #    [--sp-privateKey SP-PRIVATEKEY]
      - name: Saml configuration set  sp-x509cert
        shell:
          cmd: nextcloud.occ  saml:config:set --sp-x509cert   "{{ sp_crt.stdout }}"   1
          chdir: /snap/nextcloud/current

      - name: Saml configuration set sp-privateKey
        shell:
          cmd: nextcloud.occ  saml:config:set --sp-privateKey   "{{ sp_key.stdout }}"   1
          chdir: /snap/nextcloud/current

      #    [--idp-x509cert IDP-X509CERT]
      - name: Saml configuration set  idp-x509cert
        shell:
          cmd: nextcloud.occ  saml:config:set --idp-x509cert   "{{ idp_crt }}"   1
          chdir: /snap/nextcloud/current


      - name: Dump current saml config to see changes
        shell:
          cmd: nextcloud.occ  saml:config:get
          chdir: /snap/nextcloud/current
        register: ncconfig

      ##########################################################################
      # Closing of Nexctcloud OCC commands block
      ##########################################################################
#     become: yes
#     become_user: www-data
#     become_method: sudo
    ##########################################################################
    # End of Nexctcloud OCC commands block
    ##########################################################################

    - name: Dump nextcloud config
      debug:
        var: ncconfig

    - name: Post-install message IT IS IMPORTANT TO READ THIS
      pause:
        prompt: |
          ********************************************************************************************************
          * Nextcloud is installed in /snap/nextcloud/current.
          * Here you can also find the database config in /snap/nextcloud/current/config/config.php
          * Nextcloud data is stored in /var/lib/nextcloud.
          * Default login after installation is admin/admin
          * SSO login can be curcumvented by adding '?direct=1' to the url.
          * If all went well, a visit to "{{ nextcloud_server_url }}" will redirect you to
          * "{{ nextcloud_server_url }}"/apps/user_saml/saml/selectUserBackEnd?redirectUrl=.
          * The SSO option is called 'Keycloak'.
          ********************************************************************************************************


